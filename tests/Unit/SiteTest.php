<?php

namespace Tests\Unit;

use App\User;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Support\Facades\Route;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use App\Site;

/**
 * Class SiteTest
 * @package Tests\Unit
 * @see https://www.5balloons.info/config-laravel-run-phpunit-test-sqlite-database/
 * @see https://stackoverflow.com/questions/34454081/undefined-variable-errors-in-laravel
 */
class SiteTest extends TestCase
{
    //use WithoutMiddleware;

    protected $table = 'sites';

    private $user;

    public function setUp()
    {
        parent::setUp();

        $this->user = User::find(2);
    }

    /**
     * Test for Sites table
     * Also test for site generated by migration
     */
    public function testDatabase()
    {
        $this->assertDatabaseHas($this->table, [
            'title' => 'New Site'
        ]);
    }

    /**
     * Assert that the user is authenticated.
     *
     */
    public function testUserSiteView()
    {
        $user = User::find(1);
        $response = $this->actingAs($user, 'web')->json('GET', route('site_view'));
        $this->assertAuthenticated($guard = 'web');
    }

    /**
     * Assert that the user policy is enforced.
     *
     */
    public function testViewUserSite()
    {
        $this->withExceptionHandling();
        $user = User::find(2);
        $response = $this->actingAs($this->user, 'web')->json('GET', route('site_view', ['id' => 1]));
        $response->assertSessionHasNoErrors();
        $response->assertSee('New Site');
    }
    /**
     * Assert that the SitePolicy:class works
     * Allow user to see site
     *
     */
    public function testUserSeeSite()
    {
        $this->withExceptionHandling();
        $user = User::find(2);
        $site = Site::find(1);

        $response = $this->actingAs($this->user, 'web')->json('GET', route('site_view', ['id' => 1]));
        $response->assertSee($site->title);

    }
    /**
     * Assert that the SitePolicy:class is enforced.
     * Forbid another user from seeing site
     */
    public function testViewOtherUserSite()
    {
        $this->withExceptionHandling();
        $user = User::find(1);
        $response = $this->actingAs($user, 'web')->json('GET', route('site_view', ['id' => 1]));
        $response->assertSessionHasErrors(['errors']);
    }

    /**
     *
     * Assert that the user is authenticated.
     *
     */
    public function testUserSiteForm()
    {
        $user = User::find(1);
        $response = $this->actingAs($user, 'web')->json('GET', route('site_new'));
        $this->assertAuthenticated($guard = 'web');
    }

    /**
     *
     * Assert unauthenticated form access.
     *
     */
    public function testGuessSiteForm()
    {
        $response = $this->get('/site_new');
        $this->assertGuest($guard = 'web');
    }

    /**
     *
     * Authorized user can save a site
     * Database testing for factory post data
     * View testing for no errors
     *
     */
    public function testCanCreateSite()
    {
        $this->withoutMiddleware();
        $this->withExceptionHandling();
        $user = User::find(1);
        $site = factory(\App\Site::class)->make();
        $response = $this->actingAs($user, 'web')->json('POST', route('site_save'),$site->toArray());
        $response->assertSessionMissing('errors');
        $this->assertDatabaseHas($this->table, ['title' => $site->title]);
    }

    /**
     * @test
     * Authorized user can save a site
     * Database testing for factory post data
     * View testing for no errors
     *
     */
    public function user_can_create_a_site()
    {
        $this->withoutMiddleware();
        $this->withExceptionHandling();


        $this->actingAs(User::find(1));
        //$this->actingAs(factory('App\User')->create());

        $response = $this->post(route('site_save'), [
            factory(\App\Site::class)->make()->toArray()
        ]);



        $response->assertSessionMissing('errors');
        //$this->assertDatabaseHas($this->table, ['title' => $site->title]);
    }

    /**
     *
     * Authorized user can save a site
     * Database testing for factory post data
     * View testing for correct view loaded
     *
     */
    public function testCanCreateSiteException()
    {
        $this->withoutMiddleware();
        $this->withExceptionHandling();
        $user = User::find(1);
        $site = factory(\App\Site::class)->raw(['field' => 'value']);
        $response = $this->actingAs($user, 'web')->json('POST', route('site_save'),$site);
        $this->expectException(\Exception::class);
    }

    /**
     *
     * Save a site with errors
     * Database testing for factory post data
     * View testing for correct view loaded
     *
     */
    public function testCanCreateSiteFail()
    {
        $this->withExceptionHandling();
        $this->withoutMiddleware();
        $user = User::find(1);
        $site = factory(\App\Site::class)->make(['title' => '']);
        $response = $this->actingAs($user, 'web')->json('POST', route('site_save'),$site->toArray());
        $response->assertStatus(302);
        //$response->assertRedirect(route('site_new'));
        $response->assertSessionHasErrors([
            'title' => 'The title field is required.'
        ]);
    }

    /**
     *
     * Unauthorized user cant save a site
     *
     */
    public function testNoUserCanCreateSite()
    {
        $this->withMiddleware();
        $data = factory(\App\Site::class)->make();
        $response = $this->json('POST', route('site_save'),$data->toArray());
        $this->assertDatabaseMissing($this->table, $data->toArray());
        //$response->assertStatus(302);
    }



}
